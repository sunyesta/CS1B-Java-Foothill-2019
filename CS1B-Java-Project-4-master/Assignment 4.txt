
import java.util.Random;

public class Foothill
{
   public static void main(String[] args)
   {
      System.out.println("Base Class Testing ***********************");
      InternetUser[] users = new InternetUser[]
      { new InternetUser(), new InternetUser("Mary", "2.3.0.0"),
            new InternetUser("Alex", "4.232.0.320"),
            new InternetUser("Svetla", "823.113.334.342"),
            new InternetUser("Ivan", "3.43.2.324"),
            new InternetUser("Stephanie", "3.43.2.32402938129") };

      printUsers(users);

      users[4].setIp("5.5.5.5");
      users[0].setName("Best one");

      System.out
            .println("####################################### After mutations");

      printUsers(users);

      System.out.println("\n\n\n\n\nDerived Class Testing ***************");
      Communicator[] users2 = new Communicator[]
      { new Communicator(), new Communicator("Mary", "2.3.0.0", 137, 271),
            new Communicator("Alex", "4.232.0.320"), new Communicator(139, 821),
            new Communicator("Ivan", "3.43.2.324", 0, 0),
            new Communicator("Stephanie", "3.43.2.32402938129", 4, 4) };
      printUsers(users2);

      users2[0].setPrimes(883, 631);
      users2[0].setName("Blarbs");

      System.out.println(
            "####################################### After mutations of first user");

      System.out.println(users2[0]);

      System.out.println("\n\n\nTesting Accessors:");
      System.out
            .println("public key for second user: " + users2[1].getPublicKey());
      System.out.println(
            "private key for second user: " + users2[1].getPrivateKey());

      System.out
            .println("public key for third user: " + users2[3].getPublicKey());
      System.out.println(
            "private key for third user: " + users2[3].getPrivateKey());

   }

   public static void printUsers(InternetUser[] users)
   {

      for (int i = 0; i < users.length; i++)
      {
         System.out.println();
         System.out.println(users[i]);
      }
   }

//   public static void main(String[] args)
//   {
//      IuStack stack = new IuStack();
//      stack.pushIu(new InternetUser());
//      stack.pushIu(new InternetUser("Mary", "2.3.0.0"));
//      stack.pushIu(new InternetUser("Alex", "4.232.0.320"));
//      stack.pushIu(new InternetUser("Svetla", "823.113.334.342"));
//      stack.pushIu(new InternetUser("Ivan", "3.43.2.324"));
//      stack.pushIu(new InternetUser("Stephanie", "3.43.2.32402938129"));
//      stack.pushIu(new Communicator("Bell", "223.12.12", 137, 271));
//
//      // pushed seven but popping 10 times
//      for (int i = 0; i < 10; i++)
//      {
//         System.out.println(stack.popIu() + "\n");
//      }
//
//   }

}

/*------------------------------------------------------------------------
Two classes used by assignment #4.  Do not modify these defintions.

Place the definitions into your final submission,  with each element 
appearing above the main Foothill class, and your own classes below
Foothill. 

The imports are needed by my solution and will probably be needed
by yours, so you should place them in your project at the top of the
file(s).
----------------------------------------------------------------------- */

// IntPair allows public, no filtering; classes that use it will protect it
class IntPair
{
   public long firstInt;
   public long secondInt;

   // constructors
   IntPair()
   {
      firstInt = secondInt = 0;
   }

   IntPair(long frst, long scnd)
   {
      firstInt = frst;
      secondInt = scnd;
   }

   public String toString()
   {
      return "(" + firstInt + ", " + secondInt + ")";
   }
};

// EncryptionSupport contains only static methods for client use 
// method names should be fairly descriptive except inverseOfAModM(), which
// you can take as a black-box (see description of assignment)
class EncryptionSupport
{
   static private Random randObject = new Random(System.currentTimeMillis());

   public static boolean isPrime(long x)
   {
      long k, loopLim;

      if (x < 2)
         return false;
      if (x < 4)
         return true;
      if (x % 2 == 0 || x % 3 == 0)
         return false;

      // now use the fact the all primes of form 6k +/- 1
      loopLim = (long) Math.sqrt(x);
      for (k = 5; k <= loopLim; k += 6)
      {
         if (x % k == 0 || x % (k + 2) == 0)
            return false;
      }
      return true;
   }

   public static long inverseOfAModM(long a, long m)
   {
      // uses extended euclidean algorithm giving as + mt = gcd(m, a),
      // with gcd(m, a) = 1, and s, t discovered. s = 1/a, and t ignored

      // NOTE: this only provides an inverse if there is one, namely, if
      // a is relatively prime to m. otherwise the value it returns is
      // not the inverse. in our case, we are passing e to a which is
      // relatively prime to phi, so it always works.

      long s, t, r, sPrev, tPrev, rPrev, temp, q, inverse;

      // initialize working variables
      s = 0;
      t = 1;
      r = m;
      sPrev = 1;
      tPrev = 0;
      rPrev = a;

      while (r != 0)
      {
         q = rPrev / r;

         temp = r;
         r = rPrev - q * r;
         rPrev = temp;

         temp = s;
         s = sPrev - q * s;
         sPrev = temp;

         temp = t;
         t = tPrev - q * t;
         tPrev = temp;
      }

      inverse = sPrev % m;
      if (inverse < 0)
         inverse += m;
      return inverse;
   }

   public static long getSmallRandomPrime()
   {
      int index;
      long lowPrimes[] =
      { 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
            101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,
            167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
            239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
            313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,
            397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
            467, 479, 487, 491, 499, 503, 509, 521, 523, 541 };
      long arraySize = lowPrimes.length;

      // pick prime in the above array bet 0 and arraySize - 1
      index = (int) (randObject.nextDouble() * arraySize);

      return lowPrimes[index];
   }

   public static long getMedSizedRandomPrime()
   {
      int index;
      long medPrimes[] =
      { 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,
            619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
            709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
            809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881,
            883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,
            983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051,
            1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123,
            1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217,
            1223, };
      long arraySize = medPrimes.length;

      // pick prime in the above array bet 0 and arraySize - 1
      index = (int) (randObject.nextDouble() * arraySize);

      return medPrimes[index];
   }

}

class InternetUser
{
   public static final int MAX_NAME_LEN = 20; // [you choose an int]
   public static final int MIN_NAME_LEN = 1; // [you choose an int]
   public static final int MAX_IP4_LEN = 15; // xxx.xxx.xxx.xxx
   public static final int MIN_IP4_LEN = 7; // x.x.x.x

   public static final String DEFAULT_NAME = "(undefined)";

   public static final String DEFAULT_IP = "0.0.0.0";

   private String name;
   private String ip;

   public InternetUser(String name, String ip)
   {
      setName(name);
      setIp(ip);
   }

   public InternetUser()
   {
      this(DEFAULT_NAME, DEFAULT_IP);
   }

   public boolean setName(String name)
   {
      if (checkName(name))
      {
         this.name = name;
         return true;
      } else
      {

         this.name = DEFAULT_NAME;
         return false;
      }
   }

   public boolean setIp(String ip)
   {
      if (checkIp(ip))
      {
         this.ip = ip;
         return true;
      } else
      {

         this.ip = DEFAULT_IP;
         return false;
      }
   }

   private static boolean checkName(String name)
   {
      if (name.length() >= MIN_NAME_LEN && name.length() <= MAX_NAME_LEN)
      {
         return true;
      } else
      {
         return false;
      }
   }

   private static boolean checkIp(String ip)
   {
      if (ip.length() >= MIN_IP4_LEN && ip.length() <= MAX_IP4_LEN)
      {
         return true;
      } else
      {
         return false;
      }
   }

   // then whats the point of making name and ip private?
   public String getName()
   {
      return name;
   }

   public String getIp()
   {
      return ip;
   }

   public String toString()
   {
      String nameFormat = "Name: " + name;
      String ipFormat = "IP Aaddress: " + ip;

      return nameFormat + "\n" + ipFormat;
   }

}

class Communicator extends InternetUser
{
   // These default values will be overwritten when computeBothEncrKeys()
   // succeeds
   public IntPair publicKey = new IntPair();
   private IntPair privateKey = new IntPair();

   // The assignment asks for Integer-s below, but from the discussion it's
   // ok
   // for these to be "long", to avoid casting them:
   private long firstPrime;
   private long secondPrime;
   private long n;
   private long phi;
   private long e;
   private long d;

   public static final long ERROR_FLAG_NUM = 0;
   private static final long MAX_PQ = (long) (Math.sqrt(Long.MAX_VALUE));

   // This constructor is here for completeness but it shouldn't be used b/c
   // the
   // primes being chosen aren't valid
   Communicator()
   {
      this(0, 0);
   }

   Communicator(long firstPrime, long secondPrime)
   {
      this("", "", firstPrime, secondPrime);
   }

   // This constructor is here for completeness but it shouldn't be used b/c
   // the
   // primes being chosen aren't valid
   public Communicator(String name, String ip)
   {
      this(name, ip, 0L, 0L);
   }

   Communicator(String name, String ip, long firstPrime, long secondPrime)
   {
      super(name, ip);
      boolean success = setPrimes(firstPrime, secondPrime);
      if (!success)
      {
         this.firstPrime = ERROR_FLAG_NUM;
         this.secondPrime = ERROR_FLAG_NUM;
         this.n = ERROR_FLAG_NUM;
         this.phi = ERROR_FLAG_NUM;
         this.e = ERROR_FLAG_NUM;
         this.d = ERROR_FLAG_NUM;
      }
   }

   public boolean setPrimes(long firstPrime, long secondPrime)
   {
      if (validatePrime(firstPrime) && validatePrime(secondPrime)
            && firstPrime != secondPrime)
      {
         this.firstPrime = firstPrime;
         this.secondPrime = secondPrime;
         // instructions specify that we should ignore this value and always
         // return true:
         boolean ignoredOnPurpose = computeBothEncrKeys();
         return true;
      } else
      {
         // System.out.println("is not valid");
         return false;

      }
   }

   private boolean validatePrime(long prime)
   {
      return prime <= MAX_PQ && EncryptionSupport.isPrime(prime);
   }

   private boolean computeBothEncrKeys()
   {
      n = firstPrime * secondPrime;
      phi = (firstPrime - 1) * (secondPrime - 1);
      int count = 0;

      final int COUNT_LIMIT = 1000;
      e = 0;

      do
      {
         if (count >= COUNT_LIMIT)
         {
            // change error code?

            System.out.println("e = " + e);
            e = 0;
            return false;
         }
         e = EncryptionSupport.getSmallRandomPrime();
         count++;
      } while (e >= phi || e % phi == 0); // needs to be: e<phi and e%phi !=0

      d = EncryptionSupport.inverseOfAModM(e, phi);
      publicKey = new IntPair(e, n);
      privateKey = new IntPair(d, n);

      return true;

   }

   public IntPair getPublicKey()
   {
      return publicKey;
   }

   public IntPair getPrivateKey()
   {
      return privateKey;
   }

   public String toString()
   {
      return super.toString() + "\n(p, q)  n, phi, e, d: (" + firstPrime + ","
            + secondPrime + "\t" + n + "," + phi + "," + e + "," + d
            + ")\n public key: " + publicKey + "\n private key: " + privateKey;

   }

}

//Class Stack ---------------------------------------
class Stack
{
   // pointer to first node in stack
   private StackNode top;

   // constructor
   public Stack()
   {
      top = null;
   }

   public void push(StackNode newNode)
   {
      if (newNode == null)
         return; // emergency return
      newNode.next = top;
      top = newNode;
   }

   public StackNode pop()
   {
      StackNode temp;

      temp = top;
      if (top != null)
      {
         top = top.next;
         temp.next = null; // don't give client access to stack!
      }
      return temp;
   }

   // console display
   public String showStack()
   {
      String newString = "";
      StackNode p;

      // Display all the nodes in the stack
      for (p = top; p != null; p = p.next)
         newString += p + ", ";

      return newString;
   }
}// Class StackNode ----------------------------------

class StackNode
{
   // data (we allow Stack class public access)
   protected StackNode next;

   // constructor
   public StackNode()
   {
      next = null;
   }

   // console display
   public String toString()
   {
      return "(generic node) ";
   }
}

class IuStack extends Stack
{

   public void pushIu(InternetUser x)
   {

      IuNode n = new IuNode(x);

      // push the StackNode onto the stack (base class call)
      super.push(n);
   }

   public InternetUser popIu()
   {
      // pop a node
      IuNode fp = (IuNode) pop();
      if (fp == null)
         return null;
      else
         return fp.getData();
   }
}
//imports go at the top of whatever .java file this appears.

class IuNode extends StackNode
{
   // additional data for subclass
   private InternetUser data;

   // constructor
   public IuNode(InternetUser x)
   {
      super(); // constructor call to base class
      data = x;
   }

   // accessor
   public InternetUser getData()
   {
      return data;
   }

   // overriding show()
   public String toString()
   {

      return "[" + data + "] ";
   }
}

//------------------------------ OutPuts----------------------------
/**
 * <pre>
---------------------------------------1 main-----------------------------------------------
Base Class Testing ***********************

Name: (undefined)
IP Aaddress: 0.0.0.0

Name: Mary
IP Aaddress: 2.3.0.0

Name: Alex
IP Aaddress: 4.232.0.320

Name: Svetla
IP Aaddress: 823.113.334.342

Name: Ivan
IP Aaddress: 3.43.2.324

Name: Stephanie
IP Aaddress: 0.0.0.0
####################################### After mutations

Name: Best one
IP Aaddress: 0.0.0.0

Name: Mary
IP Aaddress: 2.3.0.0

Name: Alex
IP Aaddress: 4.232.0.320

Name: Svetla
IP Aaddress: 823.113.334.342

Name: Ivan
IP Aaddress: 5.5.5.5

Name: Stephanie
IP Aaddress: 0.0.0.0





Derived Class Testing ***************

Name: (undefined)
IP Aaddress: 0.0.0.0
(p, q)  n, phi, e, d: (0,0 0,0,0,0)
 public key: (0, 0)
 private key: (0, 0)

Name: Mary
IP Aaddress: 2.3.0.0
(p, q)  n, phi, e, d: (137,271   37127,36720,467,2123)
 public key: (467, 37127)
 private key: (2123, 37127)

Name: Alex
IP Aaddress: 4.232.0.320
(p, q)  n, phi, e, d: (0,0 0,0,0,0)
 public key: (0, 0)
 private key: (0, 0)

Name: (undefined)
IP Aaddress: 0.0.0.0
(p, q)  n, phi, e, d: (139,821   114119,113160,227,112163)
 public key: (227, 114119)
 private key: (112163, 114119)

Name: Ivan
IP Aaddress: 3.43.2.324
(p, q)  n, phi, e, d: (0,0 0,0,0,0)
 public key: (0, 0)
 private key: (0, 0)

Name: Stephanie
IP Aaddress: 0.0.0.0
(p, q)  n, phi, e, d: (0,0 0,0,0,0)
 public key: (0, 0)
 private key: (0, 0)
####################################### After mutations of first user
Name: Blarbs
IP Aaddress: 0.0.0.0
(p, q)  n, phi, e, d: (883,631   557173,555660,47,106403)
 public key: (47, 557173)
 private key: (106403, 557173)



Testing Accessors:
public key for second user: (467, 37127)
private key for second user: (2123, 37127)
public key for third user: (227, 114119)
private key for third user: (112163, 114119)

-------------------------------------2nd main-----------------------------

Name: Bell
IP Aaddress: 223.12.12
(p, q)  n, phi, e, d: (137,271   37127,36720,67,27403)
 public key: (67, 37127)
 private key: (27403, 37127)

Name: Stephanie
IP Aaddress: 0.0.0.0

Name: Ivan
IP Aaddress: 3.43.2.324

Name: Svetla
IP Aaddress: 823.113.334.342

Name: Alex
IP Aaddress: 4.232.0.320

Name: Mary
IP Aaddress: 2.3.0.0

Name: (undefined)
IP Aaddress: 0.0.0.0

null

null

null
 * 
 * 
 * 
 * 
 * </pre>
 */